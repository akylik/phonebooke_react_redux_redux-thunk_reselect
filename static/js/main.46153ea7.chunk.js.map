{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","redux/contactList-action.js","redux/contactList-operations.js","components/ContactForm/ContactForm.jsx","redux/contactList-selector.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.js","redux/contactList-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filteredContact","axios","defaults","baseURL","dispatch","a","get","data","post","then","catch","error","id","delete","ContactForm","state","name","number","nameInputId","shortid","generate","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmitProps","onSubmit","this","htmlFor","nameInputID","type","pattern","title","required","onChange","className","styles","input","Component","connect","contactOperation","getFilter","filter","filteredContacts","createSelector","contacts","normaliseNameContact","toLowerCase","contact","includes","onDeleteContact","container","map","key","item","item__container","btn","onClick","target","App","fetchContacts","createReducer","_","payload","console","log","find","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46153ea7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__1F5Eu\",\"btn\":\"ContactForm_btn__-_7P_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1raHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsList_container__3HJON\",\"item\":\"ContactsList_item__1IG_9\",\"name\":\"ContactsList_name__2RrGB\",\"btn\":\"ContactsList_btn__1DMiC\",\"item__container\":\"ContactsList_item__container__1WrjR\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// ==================== fetch contact ================================//\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\n// ==================== add contact ================================//\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\n// ==================== delete contact ================================//\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filteredContact = createAction('contacts/filter');\r\n\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from '../redux/contactList-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//    //  .then(({ data }) => dispatch(console.log(data))\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data))\r\n//     .catch(error => dispatch(fetchContactError(error))));\r\n// };\r\n\r\nconst addContact = data => dispatch => {\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', data)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactOperation from '../../redux/contactList-operations';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    id: '',\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmitProps(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={this.nameInputID}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={styles.input}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmitProps: data => dispatch(contactOperation.addContact(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\n\r\nconst getAllContacts = state => state.contacts;\r\n\r\nconst getFilter = state => state.filter;\r\n\r\nconst filteredContacts = createSelector(\r\n   [getAllContacts, getFilter],\r\n   (contacts, filter) => {\r\n      const normaliseNameContact = filter.toLowerCase();\r\n      return contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(normaliseNameContact))\r\n   }\r\n);\r\n\r\nexport {getFilter, filteredContacts };\r\n","import React, { Component } from 'react';\r\nimport styles from './ContactsList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactOperation from '../../redux/contactList-operations';\r\nimport {filteredContacts} from '../../redux/contactList-selector';\r\n\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <div className={styles.container}>\r\n    <h2>Contacts</h2>\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.item}>\r\n          <div className={styles.item__container}>\r\n            <p className={styles.name}>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.btn}\r\n              onClick={() => {\r\n                onDeleteContact(id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n   return { contacts: filteredContacts(state)};\r\n   \r\n//   const { filter, contacts } = state;\r\n//   const normaliseNameContact = filter.filter.toLowerCase();\r\n//   const filteredContacts = contacts.contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normaliseNameContact),\r\n//   );\r\n//   return { contacts: filteredContacts };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onDeleteContact: id => dispatch(contactOperation.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getFilter } from '../../redux/contactList-selector';\r\nimport { filteredContact } from '../../redux/contactList-action';\r\n\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={styles.container} >\r\n    Find contacts by name <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state),\r\n   //  value: state.filter.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(filteredContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm.jsx';\nimport ContactsList from './components/ContactsList/ContactsList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\nimport { connect } from 'react-redux';\n\nimport contactOperation from '../src/redux/contactList-operations';\n\nclass App extends Component {\n  state = {\n    filter: '',\n  };\n  //   state = {\n  //     contacts: [\n  //       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //     ],\n  //     name: '',\n  //     filter: '',\n  //   };\n  //   state = {\n  //     contacts: [],\n  //     name: '',\n  //     filter: '',\n  //   };\n\n  //   componentDidMount() {\n  //  const contacts = localStorage.getItem('contacts');\n  //  const parsedContacts = JSON.parse(contacts);\n\n  //  if (parsedContacts) {\n  //    this.setState({ contacts: parsedContacts });\n  //  }\n  //   }\n\n  //   componentDidUpdate(prevProps, prevState) {\n  //     const nextContacts = this.state.contacts;\n  //     const prevContacts = prevState.contacts;\n\n  //     if (nextContacts !== prevContacts) {\n  //       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n  //     }\n  //   }\n\n  //    dublicateContact = name => {\n  //       const { contacts } = this.state;\n  //       const isFind = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  //       if (isFind) {\n  //             //  this.setState(({ contacts }) => ({\n  //             //    contacts: [contacts],\n  //             //  }));\n  //          this.deleteContact(isFind.id);\n  //          alert('Контакт уже есть в списке !');\n  //       }\n  //    }\n\n  //   formSubmitHandler = data => {\n  //     //   console.log(data);\n  //     const {name, number} = data;\n\n  //    //   const contact = {\n  //    //    id: shortid.generate(),\n  //    //    name: data.name,\n  //    //    number: data.number,\n  //    //  };\n  //      const contact = {\n  //       id: shortid.generate(),\n  //       name,\n  //       number,\n  //     };\n  //    //  this.setState(prevState => ({\n  //    //    contacts: [contact, ...prevState.contacts],\n  //    //  }));\n  //      this.setState(({ contacts }) => ({\n  //        contacts: [contact, ...contacts],\n  //      }));\n  //      this.dublicateContact(name);\n  //   };\n\n  //   changeFilter = e => {\n  //     this.setState({ filter: e.currentTarget.value });\n  //   };\n\n  //   deleteContact = contactId => {\n  //     this.setState(prevState => ({\n  //       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //     }));\n  //   };\n\n  //   getVisibleContacts = () => {\n  //     const { filter, contacts } = this.state;\n  //     const normalizedFilterer = filter.toLocaleLowerCase();\n\n  //     return contacts.filter(contact =>\n  //       contact.name.toLowerCase().includes(normalizedFilterer),\n  //     );\n  //   };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <ContactForm />\n          {/* <ContactForm onSubmitProps={this.formSubmitHandler} /> */}\n          <Filter />\n          {/* <Filter value={this.state.filter} onChange={this.changeFilter} /> */}\n          <ContactsList\n          // contacts={filteredContacts}\n          // onDeleteContact={this.deleteContact}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\n// const mapStateToProps = state => ({\n\n// })\n\nconst mapDiaspatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactOperation.fetchContacts())\n});\n\nexport default connect(null, mapDiaspatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  addContactSuccess,\r\n  filteredContact,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n} from '../redux/contactList-action';\r\n\r\nconst contactListInitialState = [];\r\n\r\nconst contacts = createReducer(contactListInitialState, {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    const { name } = payload;\r\n    console.log(payload);\r\n    const isFinded = state.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (isFinded) {\r\n      alert('Контакт уже есть в списке !');\r\n      return;\r\n    }\r\n    return [payload, ...state];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) => {\r\n    return state.filter(contact => contact.id !== payload);\r\n  },\r\n});\r\n\r\n// const contacts = createReducer(contactListInitialState, {\r\n//   [fetchContactSuccess]: (_, { payload }) => payload,\r\n//   [addContactSuccess]: (state, { payload }) => {\r\n//     const { name } = payload;\r\n//     console.log(payload.name);\r\n//     const isFinded = state.contacts.find(\r\n//       contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//     );\r\n//     if (isFinded) {\r\n//       alert('Контакт уже есть в списке !');\r\n//       return state;\r\n//     }\r\n//     return [payload, ...state.contacts];\r\n//   },\r\n//   [deleteContactSuccess]: (state, { payload }) => ({\r\n//     contacts: state.contacts.filter(contact => contact.id !== payload),\r\n//   }),\r\n// });\r\n\r\nconst filterInitialState = '';\r\n\r\nconst filter = createReducer(filterInitialState, {\r\n  [filteredContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import * as rootReducer from '../redux/contactList-reducer';\r\n// import { persistStore, persistReducer } from 'redux-persist';\r\nimport combineReducers from '../redux/contactList-reducer'\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: combineReducers,\r\n   middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nimport store from './redux/store';\n// import { myAction } from './redux/actions';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loadings={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}